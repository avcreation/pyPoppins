#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" Set of tools to import SSL Certificates
    and create an object with all ssl certificate attribute setted.
    This is binded over and require the pyOpenSSL library.
"""
from OpenSSL import crypto
import datetime


class X509Certificate(object):
    """ A representation of X509 SSL Certificates """
    def __init__(self, cert_buffer=None, cert_filename=None):
        # check existence of cert buffer or create it
        if not cert_buffer and cert_filename:
            with open(cert_filename, 'r') as cert_file:
                cert_buffer = cert_file.read()

        self.x509 = crypto.load_certificate(crypto.FILETYPE_PEM, cert_buffer)
        # set the certificate
        self.cert = cert_buffer
        # compute subject
        subject = {}
        for key, value in self.x509.get_subject().get_components():
            subject[key.decode('utf-8')] = value.decode('utf-8')
        self.subject = subject
        # compute issuer
        issuer = {}
        for key, value in self.x509.get_issuer().get_components():
            issuer[key.decode('utf-8')] = value.decode('utf-8')
        self.issuer = issuer
        # set fingerprints
        self.fingerprint_sha1 = self.x509.digest('SHA1').decode('utf-8')
        self.fingerprint_sha256 = self.x509.digest('SHA256').decode('utf-8')
        # set not before and not after
        not_before_utf8 = self.x509.get_notBefore().decode('utf-8')
        self.not_before = reformat_cert_datetime(not_before_utf8)
        not_after_utf8 = self.x509.get_notAfter().decode('utf-8')
        self.not_after = reformat_cert_datetime(not_after_utf8)

    def __repr__(self):
        return "<X509Certificate: %s>" % self.subject['CN']

    def __eq__(self, other):
        return self.cert == other.cert

    def get_not_before_datetime(self):
        """ Return the datetime of not before certificate """
        not_before_utf8 = self.x509.get_notBefore().decode('utf-8')
        return parse_from_cert_datetime(not_before_utf8)

    def get_not_after_datetime(self):
        """ Return the datetime of not after certificate """
        not_after_utf8 = self.x509.get_notAfter().decode('utf-8')
        return parse_from_cert_datetime(not_after_utf8)


def parse_from_cert_datetime(cert_datetime):
    """ Parse the certificate datetime and return
        a datetime object.

        :param: cert_datetime: One of notAfter or notBefore
                certificate datetime
        :type cert_datetime: :py:class `str`
        :return: A datetime object
    """
    # convert cert string date to datetime
    return datetime.datetime.strptime(cert_datetime, "%Y%m%d%H%M%SZ")


def reformat_cert_datetime(cert_datetime):
    """ Get certificate datetime as generated by OpenSSL.crypto and
        return a well formatted date

        :param cert_datetime: One of notAfter or notBefore certificate datetime
        :type cert_datetime: :py:class `str`
        :return: A well formatted datetime
    """
    datetime_obj = parse_from_cert_datetime(cert_datetime)
    # return formatted string
    return datetime_obj.strftime("%b %d %H:%M:%S %Y GMT")
